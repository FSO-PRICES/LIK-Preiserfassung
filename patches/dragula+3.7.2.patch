diff --git a/node_modules/dragula/dragula.js b/node_modules/dragula/dragula.js
index 4f73231..5f8ec58 100644
--- a/node_modules/dragula/dragula.js
+++ b/node_modules/dragula/dragula.js
@@ -39,10 +39,13 @@ function dragula (initialContainers, options) {
   if (o.direction === void 0) { o.direction = 'vertical'; }
   if (o.ignoreInputTextSelection === void 0) { o.ignoreInputTextSelection = true; }
   if (o.mirrorContainer === void 0) { o.mirrorContainer = doc.body; }
+  if (o.delayedGrab === void 0) { o.delayedGrab = false; }
+  if (o.markerSelector === void 0) { o.markerSelector = null }
 
   var drake = emitter({
     containers: o.containers,
     start: manualStart,
+    grab: grab,
     end: end,
     cancel: cancel,
     remove: remove,
@@ -65,7 +68,9 @@ function dragula (initialContainers, options) {
 
   function events (remove) {
     var op = remove ? 'remove' : 'add';
-    touchy(documentElement, op, 'mousedown', grab);
+    if (!o.delayedGrab) {
+      touchy(documentElement, op, 'mousedown', grab);
+    }
     touchy(documentElement, op, 'mouseup', release);
   }
 
@@ -86,12 +91,14 @@ function dragula (initialContainers, options) {
   }
 
   function preventGrabbed (e) {
+    e.stopPropagation();
     if (_grabbed) {
       e.preventDefault();
     }
   }
 
-  function grab (e) {
+  function grab(e) {
+    e.stopPropagation();
     _moveX = e.clientX;
     _moveY = e.clientY;
 
@@ -104,6 +111,7 @@ function dragula (initialContainers, options) {
     if (!context) {
       return;
     }
+    drake.emit('grab');
     _grabbed = context;
     eventualMovements();
     if (e.type === 'mousedown') {
@@ -116,6 +124,7 @@ function dragula (initialContainers, options) {
   }
 
   function startBecauseMouseMoved (e) {
+    e.stopPropagation();
     if (!_grabbed) {
       return;
     }
@@ -303,6 +312,10 @@ function dragula (initialContainers, options) {
 
   function cleanup () {
     var item = _copy || _item;
+    _source.childNodes.forEach(c => {
+      setMarking(c, 'top', false, o.markerSelector);
+      setMarking(c, 'bottom', false, o.markerSelector);
+    })
     ungrab();
     removeMirrorImage();
     if (item) {
@@ -358,6 +371,7 @@ function dragula (initialContainers, options) {
     if (!_mirror) {
       return;
     }
+    e.stopPropagation();
     e.preventDefault();
 
     var clientX = getCoord('clientX', e);
@@ -399,12 +413,22 @@ function dragula (initialContainers, options) {
     }
     if (
       (reference === null && changed) ||
-      reference !== item &&
-      reference !== nextEl(item)
+      reference !== item
     ) {
+      if (reference) {
+        if (_currentSibling) {
+          setMarking(_currentSibling, 'top', false, o.markerSelector);
+          setMarking(_currentSibling, 'bottom', false, o.markerSelector);
+        }
+        setMarking(reference, 'top', true, o.markerSelector);
+      }
+      else {
+        if (_currentSibling) {
+          setMarking(_currentSibling, 'top', false, o.markerSelector);
+          setMarking(_currentSibling, 'bottom', true, o.markerSelector);
+        }
+      }
       _currentSibling = reference;
-      dropTarget.insertBefore(item, reference);
-      drake.emit('shadow', item, dropTarget, _source);
     }
     function moved (type) { drake.emit(type, item, _lastDropTarget, _source); }
     function over () { if (changed) { moved('over'); } }
@@ -605,4 +629,20 @@ function getCoord (coord, e) {
   return host[coord];
 }
 
+/**
+ * @param {HTMLElement} element
+ * @param {'top'|'bottom'} position
+ * @param {boolean} active
+ * @param {string} selector
+ */
+function setMarking(element, position, active, selector) {
+  if (!element || !element.querySelector) {
+      return;
+  }
+  var target = selector ? element.querySelector(selector) : element;
+  if (target) {
+    target.style[position === 'top' ? 'borderTop' : 'borderBottom'] = active ? '3px solid rgba(14, 141, 203, 0.5)' : 'none';
+  }
+}
+
 module.exports = dragula;
